{"/home/travis/build/npmtest/node-npmtest-bench-rest/test.js":"/* istanbul instrument in package npmtest_bench_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bench-rest/lib.npmtest_bench_rest.js":"/* istanbul instrument in package npmtest_bench_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bench_rest = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bench_rest = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bench-rest/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bench-rest && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bench_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bench_rest\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bench_rest.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bench_rest.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bench_rest.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bench_rest.__dirname + '/lib.npmtest_bench_rest.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bench-rest/node_modules/bench-rest/lib/bench-rest.js":"'use strict';\n/*jshint latedef:false */\n\n/* Setting up server process and client process, which gives ~8K concurrent\nsysctl -a | grep maxfiles  # display maxfiles and maxfilesperproc  defaults 12288 and 10240\nsudo sysctl -w kern.maxfiles=25000\nsudo sysctl -w kern.maxfilesperproc=24500\nsysctl -a | grep somax # display max socket setting, default 128\nsudo sysctl -w kern.ipc.somaxconn=20000  # set\nulimit -S -n       # display soft max open files, default 256\nulimit -H -n       # display hard max open files, default unlimited\nulimit -S -n 20000  # set soft max open files\n */\n\nvar async = require('async');\nvar http = require('http');\nvar https = require('https');\nvar measured = require('measured');\nvar request = require('request');\nvar EventEmitter = require('events').EventEmitter;\nvar SUBSTITUTED_KEYS = ['get', 'head', 'put', 'post', 'del', 'json', 'body', 'patch'];\n\nfunction benchmark(flow, runOptions) {\n  if (!runOptions || !runOptions.iterations || !runOptions.limit) {\n    throw new Error('benchmark runOptions requires iterations and limit properties');\n  }\n  if (!runOptions.prealloc) runOptions.prealloc = 100000; // default\n  if (runOptions.prealloc > runOptions.iterations) runOptions.prealloc = runOptions.iterations; // cap at iterations\n\n  flow = ensureFlowProperties(flow);\n  var emitter = new EventEmitter();\n  var errorCount = 0;\n  var index = 0;\n  var concurrentCount = 0; // concurrent tasks at any point in time\n  var stats = measured.createCollection();\n  var elapsed_timer = stats.timer('totalElapsed').start();\n\n  function emitProgress() {\n    var statsObj = stats.toJSON();\n    var percent = (statsObj.main) ? Math.round(statsObj.main.meter.count * 100 / runOptions.iterations) : 0;\n    var ips = (statsObj.main) ? Math.round(statsObj.main.meter.currentRate) : 0; // current iterations per second\n    emitter.emit('progress', statsObj, percent, concurrentCount, ips);\n  }\n  var progressTimer = (runOptions.progress) ? setInterval(emitProgress, runOptions.progress) : null;\n\n  function handleError(err, ctxName, exit) {\n    errorCount++;\n    emitter.emit('error', err, ctxName);\n    if (exit) {\n      shutdown();\n      emitter.emit('end', stats, errorCount);\n    }\n  }\n\n  http.globalAgent.maxSockets = runOptions.limit;\n  https.globalAgent.maxSockets = runOptions.limit;\n\n  function run(task, cb) {\n    concurrentCount += 1;\n    task.env.group = 'beforeMain';\n    performActions(task.env, task.beforeMain, function (err) {\n      if (err) {\n        handleError(err, 'beforeMain');\n        concurrentCount -= 1;\n        return cb(err);\n      }\n      var req_timer = stats.timer('main').start();\n      task.env.group = 'main';\n      performActions(task.env, task.main, function (err) {\n        req_timer.end();\n        if (err) {\n          handleError(err, 'main');\n        }\n        task.env.group = 'afterMain';\n        performActions(task.env, task.afterMain, function (err) {\n          if (err) {\n            handleError(err, 'afterMain');\n            concurrentCount -= 1;\n            return cb(err);\n          }\n          concurrentCount -= 1;\n          cb();\n        });\n      });\n    });\n    checkIfNeedToPush();\n  }\n\n  function shutdown() {\n    if (progressTimer) {\n      clearInterval(progressTimer);\n      progressTimer = null;\n    }\n    stats.end();\n  }\n\n  var queue = async.queue(run, runOptions.limit);\n\n  queue.drain = function () {\n    performActions({ group: 'after', user: runOptions.user, password: runOptions.password  }, flow.after, function (err) {\n      elapsed_timer.end();\n      if (err) {\n        handleError(err, 'after');\n      }\n      shutdown();\n      var statsObj = stats.toJSON(); // actually materializes object\n      statsObj.totalElapsed = statsObj.totalElapsed.histogram.max; // simplify the elapsed to single number\n      emitter.emit('end', statsObj, errorCount);\n    });\n  };\n\n  function pushOnQueue() {\n    var tokens = { INDEX: index };\n    queue.push({\n      env: { index: index, jar: request.jar(), user: runOptions.user, password: runOptions.password, etags: {}, iterCtx: {}, stats: stats },\n      beforeMain: bindSubtituteFnsWithTokens(flow.beforeMain, tokens),\n      main: bindSubtituteFnsWithTokens(flow.main, tokens),\n      afterMain: bindSubtituteFnsWithTokens(flow.afterMain, tokens)\n    });\n    index += 1;\n  }\n\n  function checkIfNeedToPush() {\n    if (index < runOptions.iterations) {\n      pushOnQueue();\n    }\n  }\n\n  process.nextTick(function () { // allow event handlers to be hooked up before starting\n\n    performActions({ group: 'before', user: runOptions.user, password: runOptions.password }, flow.before, function (err) {\n      if (err) {\n        return handleError(err, 'before', true);  // exit if fails here\n      }\n\n      // create optimized substitution fns for each flow where needed\n      flow.beforeMain = substituteFnWhereNeeded(flow.beforeMain);\n      flow.main = substituteFnWhereNeeded(flow.main);\n      flow.afterMain = substituteFnWhereNeeded(flow.afterMain);\n\n      try {\n        for (var i = 0; i < runOptions.prealloc; i++) {\n          pushOnQueue();\n        }\n      } catch (err) {\n        handleError(err, 'queuing');\n      }\n    });\n\n  });\n\n  return emitter;\n}\n\nfunction ensureFlowProperties(flow) {\n  if (!flow) flow = {};\n  if (typeof flow === 'string') flow = { main: [{ get: flow }] }; // allow URL only as main GET flow\n  if (Array.isArray(flow)) flow = { main: flow }; // allow passing just main ops as flow\n  if (!flow.main && !flow.before && !flow.after && !flow.beforeMain && !flow.afterMain &&\n      Object.keys(flow).length) {\n    // assuming if none of these properties exist but does have properties\n    //that this is a single operation as the main\n    flow = { main: [flow] };\n  }\n\n  if (!Array.isArray(flow.main)) {\n    throw new Error('benchmark flow requires main operations, missing flow.main?');\n  }\n\n  if (!flow.before) flow.before = [];\n  if (!flow.after) flow.after = [];\n  if (!flow.beforeMain) flow.beforeMain = [];\n  if (!flow.afterMain) flow.afterMain = [];\n  return flow;\n}\n\nfunction getRequestOptions(env, action) {\n  // just using action and update in place\n  action.jar = env.jar;\n  if (!action.headers) action.headers = {};\n  action.headers.Connection = 'keep-alive';\n  if (env.user) { // if user provided, add basic auth authentication\n    action.headers.Authorization = 'Basic ' + new Buffer(env.user + ':' + env.password).toString('base64');\n  }\n  if (action.get) {\n    action.method = 'GET';\n    action.uri = action.get;\n  } else if (action.head) {\n    action.method = 'HEAD';\n    action.uri = action.head;\n  } else if (action.put) {\n    action.method = 'PUT';\n    action.uri = action.put;\n  } else if (action.post) {\n    action.method = 'POST';\n    action.uri = action.post;\n  } else if (action.del) {\n    action.method = 'DELETE';\n    action.uri = action.del;\n  } else if (action.patch) {\n    action.method = 'PATCH';\n    action.uri = action.patch;\n  }\n  return action;\n}\n\nvar CORE_HOOKS = {\n  useEtag: function (all) {\n    if (all.env.etags && all.env.etags[all.requestOptions.uri]) {\n      var headerName = (all.requestOptions.get || all.requestOptions.head) ? 'If-None-Match' : 'If-Match';\n      all.requestOptions.headers[headerName] = all.env.etags[all.requestOptions.uri];\n    }\n    return all;\n  },\n  saveEtag: function (all) {\n    var res = all.response;\n    if (!all.err && res.statusCode >= 200 && res.statusCode < 300 && res.headers.etag) {\n      // if POST returned Location use it for ETag URI, not original URI\n      var uri = (all.requestOptions.method === 'POST' && res.headers.location) ?\n        res.headers.location :\n        all.requestOptions.uri;\n      if (!all.env.etags) all.env.etags = {};\n      all.env.etags[uri] = res.headers.etag;\n    }\n    return all;\n  },\n  ignoreStatus: function (all) {\n    if (!all.err && all.response.statusCode >= 400) all.response.statusCode = 200;\n    return all;\n  },\n  verify2XX: function (all) {\n    if (!all.err) { // no previous error\n      var statusCode = all.response.statusCode;\n      if (statusCode < 200 || statusCode > 299) {\n        throw new Error('statusCode was not in 200-299 range, statusCode: ' + statusCode);\n      }\n    }\n    return all;\n  },\n  startStepTimer: function (all) {\n    if (!all.iterCtx.stepTimers) {\n      // create map for step timers if doesn't exist\n      all.iterCtx.stepTimers = {};\n    }\n    // create timer for this step and store in stepTimers[step_xyz]\n    var timerName = 'step_'+all.opIndex; // step_0, step_1, ...\n    all.iterCtx.stepTimers[all.opIndex] = all.env.stats.timer(timerName).start();\n    return all;\n  },\n  endStepTimer: function (all) {\n    // stop timer previously created for step in startStepTimer\n    all.iterCtx.stepTimers[all.opIndex].end();\n    return all;\n  }\n};\n\nfunction identityHook(all) { return all; }\n\nfunction processHooks(hookName, all) {\n  var hooks = all.requestOptions[hookName] || [];\n  if (!hooks.length) return all;\n  hooks = hooks.map(function (hook) { // substitute core hooks\n    if (typeof hook === 'string') hook = CORE_HOOKS[hook];\n    if (!hook) hook  = identityHook;\n    return hook;\n  });\n  try {\n    all = hooks.reduce(function (accum, hook) { return hook(accum); }, all);\n    return all;\n  } catch (err) {\n    all.cb(err);\n    return false; // already handled exit\n  }\n}\n\nfunction performActions(env, actionArr, cb) {\n  actionArr = execAnySubFns(actionArr); // run any substitionFns so just have values\n  var performActionWithEnv = performAction.bind(null, env);\n  async.reduce(actionArr, 0, performActionWithEnv, cb);\n}\n\nfunction performAction(env, opIndex, action, cb) {\n  env.actionName = env.group + '_' + opIndex;\n  var all = {\n    env: env,\n    opIndex: opIndex,\n    iterCtx: env.iterCtx, // for user storage\n    requestOptions: getRequestOptions(env, action),\n    err: null,\n    cb: cb\n  };\n  all = processHooks('beforeHooks', all);\n  if (!all) return; // already handled\n  var req = request(all.requestOptions, function (err, res, body) {\n    all.err = err;\n    all.response = res;\n    all.body = body;\n    all = processHooks('afterHooks', all);\n    if (!all) return; // already handled\n    if (all.err) return all.cb(all.err);\n    if (all.response.statusCode >= 400) return all.cb(new Error('error statusCode: ' + all.response.statusCode));\n    all.cb(null, opIndex + 1);\n  });\n  if (!all.requestOptions.formData) req.start(); // cant if has formData\n}\n\n/**\n * determines if a property needs substitution\n * @returns boolean true if needs substition\n */\nfunction needsSubtitution(prop) {\n  var needsSub = false;\n  if (typeof prop === 'string') {\n    if (prop.indexOf('#{INDEX}') !== -1) needsSub = true;\n  } else if (typeof prop === 'object') {\n    var str = JSON.stringify(prop);\n    if (str.indexOf('#{INDEX}') !== -1) needsSub = true;\n  }\n  return needsSub;\n}\n\n/**\n * create modified actions object which has substituteFns for any keys that\n * are using substitution. These substituteFns have one argument `tokens` which\n * will be bound to them in the queuing loop, so at runtime, the fn will be\n * executed and returns the proper value.\n *\n * Keys which do not need substitution, will be returned untouched and thus\n * will save the overhead of needing replacement and stringify/parse (json)\n *\n * If adding keys, be sure to update the SUBSTITUTED_KEYS constant.\n *\n * @returns actions object with replacements done as necessary\n */\nfunction substituteFnWhereNeeded(actions) {\n  actions = actions || [];\n  return actions.map(function (action) {\n    return Object.keys(action).reduce(function (accum, key) {\n      if ((key === 'get' || key === 'head' || key === 'put' || key === 'post' || key === 'del' || key === 'patch') &&\n          needsSubtitution(action[key])) {\n        accum[key] = function (tokens) {\n          return action[key].replace(/\\#\\{INDEX\\}/g, tokens.INDEX);\n        };\n      } else if (key === 'json' && needsSubtitution(action[key])) {\n        accum[key] = function (tokens) {\n          return JSON.parse(JSON.stringify(action[key]).replace(/\\#\\{INDEX\\}/g, tokens.INDEX));\n        };\n      } else if (key === 'body' && typeof action.body === 'string' && needsSubtitution(action[key])) {\n        accum[key] = function (tokens) {\n          return action[key].replace(/\\#\\{INDEX\\}/g, tokens.INDEX);\n        };\n      } else {\n        accum[key] = action[key];\n      }\n      return accum;\n    }, {});\n  });\n}\n\n/**\n  if any of the action properties that allow substitution are fns, then\n  bind the tokens to the fn, so when executed it will have proper value\n  @returns actions with fns bound\n  */\nfunction bindSubtituteFnsWithTokens(actions, tokens) {\n  return actions.map(function (action) {\n    return Object.keys(action).reduce(function (accum, key) {\n      // if it is list of sub keys, and is a fn, then bind with tokens\n      if (SUBSTITUTED_KEYS.indexOf(key) !== -1 && typeof action[key] === 'function') {\n        accum[key] = action[key].bind(null, tokens);\n      } else {\n        accum[key] = action[key];\n      }\n      return accum;\n    }, {});\n  });\n}\n\n/**\n  If any substitutions need to be done, the properties will be\n  replaced with a fn which has been bound to tokens, so exec the\n  fn and return the value for the property\n  @returns actions with values ready for use\n  */\nfunction execAnySubFns(actions) {\n  return actions.map(function (action) {\n    return Object.keys(action).reduce(function (accum, key) {\n      // if it is list of sub keys, and is a fn, then bind with tokens\n      if (SUBSTITUTED_KEYS.indexOf(key) !== -1 && typeof action[key] === 'function') {\n        accum[key] = action[key](); // exec fn to get value\n      } else {\n        accum[key] = action[key];\n      }\n      return accum;\n    }, {});\n  });\n}\n\n\n\nmodule.exports = benchmark;\n"}